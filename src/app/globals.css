@import 'tailwindcss';

@theme {
  --font-serif: var(--font-garamond);
  --font-sans: var(--font-inter);

  --background-image-roof: url(/roof.svg);
  --background-image-care: url(/care-2.svg);
  --background-image-about_hero: url(/about-hero.svg);

  --color-background: var(--background);
  --color-foreground: var(--foreground);

  --color-primary-50: #effefa;
  --color-primary-100: #c7fff2;
  --color-primary-200: #90ffe5;
  --color-primary-300: #51f7d7;
  --color-primary-400: #1de4c4;
  --color-primary-500: #04c8ab;
  --color-primary-600: #00a28e;
  --color-primary-700: #058072;
  --color-primary-800: #0a655c;
  --color-primary-900: #0d544d;
  --color-primary-950: #003330;
  --color-primary: #00a28e;

  --color-secondary: #a20014;
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@utility title {
  @apply text-[36px]  font-semibold;
}

@utility card {
  @apply shadow-xs w-fit rounded-lg p-5;
}

@utility card-sublabel {
  @apply text-[15px] font-light;
}

@utility card-data {
  @apply text-[32px] font-bold;
  color: black;
}

@utility input-control {
  @apply flex flex-col;
}

@utility folder {
  width: 50px;
  height: 35px;
  overflow: hidden;

  border-radius: 5px 5px 5px 5px;
  filter: drop-shadow(0 0 0.1px rgb(145, 145, 145));

  @apply bg-white relative shadow-xs inline-block;

  &::before {
    content: '';
    position: absolute;
    top: 0px;
    right: 0px;
    width: 20px;
    height: 5px;
    border-radius: 0 0 0 25px;
    @apply bg-gray-300 z-10;
  }

  &::after {
    content: '';
    position: absolute;
    width: 20px;
    height: 1px;
    border-radius: 0 0 50px 50px;
    @apply bg-primary top-0 left-1 z-0;
  }
}

@layer base {



  .icon {
    opacity: 1;
  }
  .enter-icon {
    @apply transition-all duration-300 ease-in-out;
    @apply opacity-100! origin-center;
  }

  .exit-icon {
    @apply transition-all duration-300 ease-in-out;
    @apply transition-all duration-300 ease-in-out;
    @apply rotate-45 opacity-0 origin-center;
  }

  .page {
    min-height: calc(100vh - 64px);
    @apply p-5 md:p-20;
  }
}

@layer components {

  p {
    letter-spacing: 1px;
  }

  input,
  textarea {
    @apply rounded-md px-3 py-4 bg-gray-50 outline-primary;
  }

  textarea {
    height: 200px;
  }

  input::placeholder, textarea::placeholder {
    @apply text-gray-500! font-normal!
  }

  label {
    @apply font-medium;
  }

  #map-container {
    @apply relative;
  }
}

@layer utilities {
  /* ----------------------------------------------
 * Generated by Animista on 2024-12-2 16:7:44
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

  /**
 * ----------------------------------------
 * animation scale-in-tr
 * ----------------------------------------
 */
  @-webkit-keyframes scale-in-tr {
    0% {
      -webkit-transform: scale(0);
      transform: scale(0);
      -webkit-transform-origin: 100% 0%;
      transform-origin: 100% 0%;
      opacity: 1;
    }
    100% {
      -webkit-transform: scale(1);
      transform: scale(1);
      -webkit-transform-origin: 100% 0%;
      transform-origin: 100% 0%;
      opacity: 1;
    }
  }
  @keyframes scale-in-tr {
    0% {
      -webkit-transform: scale(0);
      transform: scale(0);
      -webkit-transform-origin: 100% 0%;
      transform-origin: 100% 0%;
      opacity: 1;
    }
    100% {
      -webkit-transform: scale(1);
      transform: scale(1);
      -webkit-transform-origin: 100% 0%;
      transform-origin: 100% 0%;
      opacity: 1;
    }
  }

  .scale-in-tr {
    -webkit-animation: scale-in-tr 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)
      both;
    animation: scale-in-tr 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }
}

@layer base {
  .menu:has(input:checked) {
    @apply transition-all rotate-45;
  }
}
